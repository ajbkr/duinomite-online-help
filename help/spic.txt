NAME
  SPIC -- SPI communication

DESCRIPTION
  The Serial Peripheral Interface (SPI)
  communications  protocol is used to send and
  receive data between integrated circuits. As
  implemented this function is suitable for moving
  small amounts of data to and from a chip like an
  accelerometer but not for shifting large amounts
  of data from EEPROMS, etc. The SPI function in
  MMBasic acts as the master (ie MMBasic generates
  the clock). 

  The syntax of the SPI function is: 

    received_data = SPI(rx,tx,clock[,data
     [,speed]])

  Where: 

    'rx' is the pin number for the data input
    (MISO)

    'tx' is the pin number for the data output
    (MOSI) 

    'clock' is the pin number for the clock
    generated by MMBasic (CLK) 

    'data' is optional and is an integer
    representing the data byte to send over the
    output pin. If it is not specified the 'tx'
    pin will be held low.
 
    'speed' is optional and is the speed of the
    clock. It is a single letter either H, M or L
    where H is 500KHz,  M is 50KHz and L is 5KHz.
    Default is H. M is 50KHz and L is 5KHz.
    Default is H

  The SPI function will return the byte received
  during the transaction as an integer. Note that
  a single SPI transaction will send a byte while
  simultaneously receiving a byte (which is often
  discarded).

  Transmission Format: 

  The format of the transmission matches the most
  common standard. The clock is high when inactive
  and the data is valid on the clock's trailing
  edge (ie, low to high transition). Data bytes
  are 8 bits, high voltage is logic 1 and the most
  significant bit is sent first. 

  In SPI parlance the MMBasic implementation of
  SPI has CPOL = 1 and CPHA = 1 or it operates in
  mode 3. 

  I/O Pins: 

  Before invoking this function the Rx pin must be
  configured as an input using the SETPIN command
  and the Tx and clock pins must be configured as
  outputs (either normal or open collector). The
  clock pin should also be set high (using the PIN
  function) before the SETPIN command so that it
  starts as inactive (ie, high). 

  The SPI enable signal is often used to select a
  slave and "prime" it for data transfer. This
  signal is not generated by this function and (if
  required) should be generated using the PIN
  function on another pin. 

  The SPI function does not "take control" of the
  I/O pins like the serial and I2C protocols and
  the PIN command will continue to operate as
  normal on them. Also, because the I/O pins can
  be changed between function calls it is possible
  to communicate with many different SPI slaves on
  different I/O pins. 

EXAMPLE
  \> 10 SETPIN 1,2 'PIN(1) as Rx digital input
  \> 20 SETPIN 2,8 'PIN(2) as Tx digital output 
  \> 30 PIN(3) = 1: SETPIN 3,8 'PIN(3) clock as
   output 
  \> 40 PIN(4) = 1: SETPIN 4,8 'PIN(4) as slave
   select
  \> 50 '
  \> 100 PIN(4) = 0 'slave select
  \> 110 junk = SPI(1,2,3,&H80) 'send &H80
  \> 120 BYTE1 = SPI(1,2,3) 'read first byte
  \> 130 BYTE2 = SPI(1,2,3) 'read second byte
  \> 140 PIN(4) = 1 'slave de-select

  This program sends the command &H80 and receive
  two bytes from the slave SPI device. Because the
  speed is not specified it defaults to high
  (500KHz). 
